// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	serialization "github.com/microsoft/kiota-abstractions-go/serialization"
	models "github.com/microsoftgraph/msgraph-sdk-go/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/microsoft/kiota-abstractions-go/store"

	time "time"

	uuid "github.com/google/uuid"
)

// Applicationable is an autogenerated mock type for the Applicationable type
type Applicationable struct {
	mock.Mock
}

// GetAddIns provides a mock function with given fields:
func (_m *Applicationable) GetAddIns() []models.AddInable {
	ret := _m.Called()

	var r0 []models.AddInable
	if rf, ok := ret.Get(0).(func() []models.AddInable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AddInable)
		}
	}

	return r0
}

// GetAdditionalData provides a mock function with given fields:
func (_m *Applicationable) GetAdditionalData() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetApi provides a mock function with given fields:
func (_m *Applicationable) GetApi() models.ApiApplicationable {
	ret := _m.Called()

	var r0 models.ApiApplicationable
	if rf, ok := ret.Get(0).(func() models.ApiApplicationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ApiApplicationable)
		}
	}

	return r0
}

// GetAppId provides a mock function with given fields:
func (_m *Applicationable) GetAppId() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetAppManagementPolicies provides a mock function with given fields:
func (_m *Applicationable) GetAppManagementPolicies() []models.AppManagementPolicyable {
	ret := _m.Called()

	var r0 []models.AppManagementPolicyable
	if rf, ok := ret.Get(0).(func() []models.AppManagementPolicyable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AppManagementPolicyable)
		}
	}

	return r0
}

// GetAppRoles provides a mock function with given fields:
func (_m *Applicationable) GetAppRoles() []models.AppRoleable {
	ret := _m.Called()

	var r0 []models.AppRoleable
	if rf, ok := ret.Get(0).(func() []models.AppRoleable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AppRoleable)
		}
	}

	return r0
}

// GetApplicationTemplateId provides a mock function with given fields:
func (_m *Applicationable) GetApplicationTemplateId() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetBackingStore provides a mock function with given fields:
func (_m *Applicationable) GetBackingStore() store.BackingStore {
	ret := _m.Called()

	var r0 store.BackingStore
	if rf, ok := ret.Get(0).(func() store.BackingStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.BackingStore)
		}
	}

	return r0
}

// GetCertification provides a mock function with given fields:
func (_m *Applicationable) GetCertification() models.Certificationable {
	ret := _m.Called()

	var r0 models.Certificationable
	if rf, ok := ret.Get(0).(func() models.Certificationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Certificationable)
		}
	}

	return r0
}

// GetCreatedDateTime provides a mock function with given fields:
func (_m *Applicationable) GetCreatedDateTime() *time.Time {
	ret := _m.Called()

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetCreatedOnBehalfOf provides a mock function with given fields:
func (_m *Applicationable) GetCreatedOnBehalfOf() models.DirectoryObjectable {
	ret := _m.Called()

	var r0 models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.DirectoryObjectable)
		}
	}

	return r0
}

// GetDefaultRedirectUri provides a mock function with given fields:
func (_m *Applicationable) GetDefaultRedirectUri() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetDeletedDateTime provides a mock function with given fields:
func (_m *Applicationable) GetDeletedDateTime() *time.Time {
	ret := _m.Called()

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetDescription provides a mock function with given fields:
func (_m *Applicationable) GetDescription() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetDisabledByMicrosoftStatus provides a mock function with given fields:
func (_m *Applicationable) GetDisabledByMicrosoftStatus() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetDisplayName provides a mock function with given fields:
func (_m *Applicationable) GetDisplayName() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetExtensionProperties provides a mock function with given fields:
func (_m *Applicationable) GetExtensionProperties() []models.ExtensionPropertyable {
	ret := _m.Called()

	var r0 []models.ExtensionPropertyable
	if rf, ok := ret.Get(0).(func() []models.ExtensionPropertyable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExtensionPropertyable)
		}
	}

	return r0
}

// GetFederatedIdentityCredentials provides a mock function with given fields:
func (_m *Applicationable) GetFederatedIdentityCredentials() []models.FederatedIdentityCredentialable {
	ret := _m.Called()

	var r0 []models.FederatedIdentityCredentialable
	if rf, ok := ret.Get(0).(func() []models.FederatedIdentityCredentialable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FederatedIdentityCredentialable)
		}
	}

	return r0
}

// GetFieldDeserializers provides a mock function with given fields:
func (_m *Applicationable) GetFieldDeserializers() map[string]func(serialization.ParseNode) error {
	ret := _m.Called()

	var r0 map[string]func(serialization.ParseNode) error
	if rf, ok := ret.Get(0).(func() map[string]func(serialization.ParseNode) error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]func(serialization.ParseNode) error)
		}
	}

	return r0
}

// GetGroupMembershipClaims provides a mock function with given fields:
func (_m *Applicationable) GetGroupMembershipClaims() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetHomeRealmDiscoveryPolicies provides a mock function with given fields:
func (_m *Applicationable) GetHomeRealmDiscoveryPolicies() []models.HomeRealmDiscoveryPolicyable {
	ret := _m.Called()

	var r0 []models.HomeRealmDiscoveryPolicyable
	if rf, ok := ret.Get(0).(func() []models.HomeRealmDiscoveryPolicyable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.HomeRealmDiscoveryPolicyable)
		}
	}

	return r0
}

// GetId provides a mock function with given fields:
func (_m *Applicationable) GetId() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetIdentifierUris provides a mock function with given fields:
func (_m *Applicationable) GetIdentifierUris() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetInfo provides a mock function with given fields:
func (_m *Applicationable) GetInfo() models.InformationalUrlable {
	ret := _m.Called()

	var r0 models.InformationalUrlable
	if rf, ok := ret.Get(0).(func() models.InformationalUrlable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.InformationalUrlable)
		}
	}

	return r0
}

// GetIsDeviceOnlyAuthSupported provides a mock function with given fields:
func (_m *Applicationable) GetIsDeviceOnlyAuthSupported() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetIsFallbackPublicClient provides a mock function with given fields:
func (_m *Applicationable) GetIsFallbackPublicClient() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetKeyCredentials provides a mock function with given fields:
func (_m *Applicationable) GetKeyCredentials() []models.KeyCredentialable {
	ret := _m.Called()

	var r0 []models.KeyCredentialable
	if rf, ok := ret.Get(0).(func() []models.KeyCredentialable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.KeyCredentialable)
		}
	}

	return r0
}

// GetLogo provides a mock function with given fields:
func (_m *Applicationable) GetLogo() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetNotes provides a mock function with given fields:
func (_m *Applicationable) GetNotes() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetOauth2RequirePostResponse provides a mock function with given fields:
func (_m *Applicationable) GetOauth2RequirePostResponse() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetOdataType provides a mock function with given fields:
func (_m *Applicationable) GetOdataType() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetOptionalClaims provides a mock function with given fields:
func (_m *Applicationable) GetOptionalClaims() models.OptionalClaimsable {
	ret := _m.Called()

	var r0 models.OptionalClaimsable
	if rf, ok := ret.Get(0).(func() models.OptionalClaimsable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.OptionalClaimsable)
		}
	}

	return r0
}

// GetOwners provides a mock function with given fields:
func (_m *Applicationable) GetOwners() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetParentalControlSettings provides a mock function with given fields:
func (_m *Applicationable) GetParentalControlSettings() models.ParentalControlSettingsable {
	ret := _m.Called()

	var r0 models.ParentalControlSettingsable
	if rf, ok := ret.Get(0).(func() models.ParentalControlSettingsable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ParentalControlSettingsable)
		}
	}

	return r0
}

// GetPasswordCredentials provides a mock function with given fields:
func (_m *Applicationable) GetPasswordCredentials() []models.PasswordCredentialable {
	ret := _m.Called()

	var r0 []models.PasswordCredentialable
	if rf, ok := ret.Get(0).(func() []models.PasswordCredentialable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PasswordCredentialable)
		}
	}

	return r0
}

// GetPublicClient provides a mock function with given fields:
func (_m *Applicationable) GetPublicClient() models.PublicClientApplicationable {
	ret := _m.Called()

	var r0 models.PublicClientApplicationable
	if rf, ok := ret.Get(0).(func() models.PublicClientApplicationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.PublicClientApplicationable)
		}
	}

	return r0
}

// GetPublisherDomain provides a mock function with given fields:
func (_m *Applicationable) GetPublisherDomain() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetRequestSignatureVerification provides a mock function with given fields:
func (_m *Applicationable) GetRequestSignatureVerification() models.RequestSignatureVerificationable {
	ret := _m.Called()

	var r0 models.RequestSignatureVerificationable
	if rf, ok := ret.Get(0).(func() models.RequestSignatureVerificationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.RequestSignatureVerificationable)
		}
	}

	return r0
}

// GetRequiredResourceAccess provides a mock function with given fields:
func (_m *Applicationable) GetRequiredResourceAccess() []models.RequiredResourceAccessable {
	ret := _m.Called()

	var r0 []models.RequiredResourceAccessable
	if rf, ok := ret.Get(0).(func() []models.RequiredResourceAccessable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RequiredResourceAccessable)
		}
	}

	return r0
}

// GetSamlMetadataUrl provides a mock function with given fields:
func (_m *Applicationable) GetSamlMetadataUrl() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetServiceManagementReference provides a mock function with given fields:
func (_m *Applicationable) GetServiceManagementReference() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetServicePrincipalLockConfiguration provides a mock function with given fields:
func (_m *Applicationable) GetServicePrincipalLockConfiguration() models.ServicePrincipalLockConfigurationable {
	ret := _m.Called()

	var r0 models.ServicePrincipalLockConfigurationable
	if rf, ok := ret.Get(0).(func() models.ServicePrincipalLockConfigurationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ServicePrincipalLockConfigurationable)
		}
	}

	return r0
}

// GetSignInAudience provides a mock function with given fields:
func (_m *Applicationable) GetSignInAudience() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetSpa provides a mock function with given fields:
func (_m *Applicationable) GetSpa() models.SpaApplicationable {
	ret := _m.Called()

	var r0 models.SpaApplicationable
	if rf, ok := ret.Get(0).(func() models.SpaApplicationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.SpaApplicationable)
		}
	}

	return r0
}

// GetSynchronization provides a mock function with given fields:
func (_m *Applicationable) GetSynchronization() models.Synchronizationable {
	ret := _m.Called()

	var r0 models.Synchronizationable
	if rf, ok := ret.Get(0).(func() models.Synchronizationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Synchronizationable)
		}
	}

	return r0
}

// GetTags provides a mock function with given fields:
func (_m *Applicationable) GetTags() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetTokenEncryptionKeyId provides a mock function with given fields:
func (_m *Applicationable) GetTokenEncryptionKeyId() *uuid.UUID {
	ret := _m.Called()

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func() *uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	return r0
}

// GetTokenIssuancePolicies provides a mock function with given fields:
func (_m *Applicationable) GetTokenIssuancePolicies() []models.TokenIssuancePolicyable {
	ret := _m.Called()

	var r0 []models.TokenIssuancePolicyable
	if rf, ok := ret.Get(0).(func() []models.TokenIssuancePolicyable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TokenIssuancePolicyable)
		}
	}

	return r0
}

// GetTokenLifetimePolicies provides a mock function with given fields:
func (_m *Applicationable) GetTokenLifetimePolicies() []models.TokenLifetimePolicyable {
	ret := _m.Called()

	var r0 []models.TokenLifetimePolicyable
	if rf, ok := ret.Get(0).(func() []models.TokenLifetimePolicyable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TokenLifetimePolicyable)
		}
	}

	return r0
}

// GetVerifiedPublisher provides a mock function with given fields:
func (_m *Applicationable) GetVerifiedPublisher() models.VerifiedPublisherable {
	ret := _m.Called()

	var r0 models.VerifiedPublisherable
	if rf, ok := ret.Get(0).(func() models.VerifiedPublisherable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.VerifiedPublisherable)
		}
	}

	return r0
}

// GetWeb provides a mock function with given fields:
func (_m *Applicationable) GetWeb() models.WebApplicationable {
	ret := _m.Called()

	var r0 models.WebApplicationable
	if rf, ok := ret.Get(0).(func() models.WebApplicationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.WebApplicationable)
		}
	}

	return r0
}

// Serialize provides a mock function with given fields: writer
func (_m *Applicationable) Serialize(writer serialization.SerializationWriter) error {
	ret := _m.Called(writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(serialization.SerializationWriter) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAddIns provides a mock function with given fields: value
func (_m *Applicationable) SetAddIns(value []models.AddInable) {
	_m.Called(value)
}

// SetAdditionalData provides a mock function with given fields: value
func (_m *Applicationable) SetAdditionalData(value map[string]interface{}) {
	_m.Called(value)
}

// SetApi provides a mock function with given fields: value
func (_m *Applicationable) SetApi(value models.ApiApplicationable) {
	_m.Called(value)
}

// SetAppId provides a mock function with given fields: value
func (_m *Applicationable) SetAppId(value *string) {
	_m.Called(value)
}

// SetAppManagementPolicies provides a mock function with given fields: value
func (_m *Applicationable) SetAppManagementPolicies(value []models.AppManagementPolicyable) {
	_m.Called(value)
}

// SetAppRoles provides a mock function with given fields: value
func (_m *Applicationable) SetAppRoles(value []models.AppRoleable) {
	_m.Called(value)
}

// SetApplicationTemplateId provides a mock function with given fields: value
func (_m *Applicationable) SetApplicationTemplateId(value *string) {
	_m.Called(value)
}

// SetBackingStore provides a mock function with given fields: value
func (_m *Applicationable) SetBackingStore(value store.BackingStore) {
	_m.Called(value)
}

// SetCertification provides a mock function with given fields: value
func (_m *Applicationable) SetCertification(value models.Certificationable) {
	_m.Called(value)
}

// SetCreatedDateTime provides a mock function with given fields: value
func (_m *Applicationable) SetCreatedDateTime(value *time.Time) {
	_m.Called(value)
}

// SetCreatedOnBehalfOf provides a mock function with given fields: value
func (_m *Applicationable) SetCreatedOnBehalfOf(value models.DirectoryObjectable) {
	_m.Called(value)
}

// SetDefaultRedirectUri provides a mock function with given fields: value
func (_m *Applicationable) SetDefaultRedirectUri(value *string) {
	_m.Called(value)
}

// SetDeletedDateTime provides a mock function with given fields: value
func (_m *Applicationable) SetDeletedDateTime(value *time.Time) {
	_m.Called(value)
}

// SetDescription provides a mock function with given fields: value
func (_m *Applicationable) SetDescription(value *string) {
	_m.Called(value)
}

// SetDisabledByMicrosoftStatus provides a mock function with given fields: value
func (_m *Applicationable) SetDisabledByMicrosoftStatus(value *string) {
	_m.Called(value)
}

// SetDisplayName provides a mock function with given fields: value
func (_m *Applicationable) SetDisplayName(value *string) {
	_m.Called(value)
}

// SetExtensionProperties provides a mock function with given fields: value
func (_m *Applicationable) SetExtensionProperties(value []models.ExtensionPropertyable) {
	_m.Called(value)
}

// SetFederatedIdentityCredentials provides a mock function with given fields: value
func (_m *Applicationable) SetFederatedIdentityCredentials(value []models.FederatedIdentityCredentialable) {
	_m.Called(value)
}

// SetGroupMembershipClaims provides a mock function with given fields: value
func (_m *Applicationable) SetGroupMembershipClaims(value *string) {
	_m.Called(value)
}

// SetHomeRealmDiscoveryPolicies provides a mock function with given fields: value
func (_m *Applicationable) SetHomeRealmDiscoveryPolicies(value []models.HomeRealmDiscoveryPolicyable) {
	_m.Called(value)
}

// SetId provides a mock function with given fields: value
func (_m *Applicationable) SetId(value *string) {
	_m.Called(value)
}

// SetIdentifierUris provides a mock function with given fields: value
func (_m *Applicationable) SetIdentifierUris(value []string) {
	_m.Called(value)
}

// SetInfo provides a mock function with given fields: value
func (_m *Applicationable) SetInfo(value models.InformationalUrlable) {
	_m.Called(value)
}

// SetIsDeviceOnlyAuthSupported provides a mock function with given fields: value
func (_m *Applicationable) SetIsDeviceOnlyAuthSupported(value *bool) {
	_m.Called(value)
}

// SetIsFallbackPublicClient provides a mock function with given fields: value
func (_m *Applicationable) SetIsFallbackPublicClient(value *bool) {
	_m.Called(value)
}

// SetKeyCredentials provides a mock function with given fields: value
func (_m *Applicationable) SetKeyCredentials(value []models.KeyCredentialable) {
	_m.Called(value)
}

// SetLogo provides a mock function with given fields: value
func (_m *Applicationable) SetLogo(value []byte) {
	_m.Called(value)
}

// SetNotes provides a mock function with given fields: value
func (_m *Applicationable) SetNotes(value *string) {
	_m.Called(value)
}

// SetOauth2RequirePostResponse provides a mock function with given fields: value
func (_m *Applicationable) SetOauth2RequirePostResponse(value *bool) {
	_m.Called(value)
}

// SetOdataType provides a mock function with given fields: value
func (_m *Applicationable) SetOdataType(value *string) {
	_m.Called(value)
}

// SetOptionalClaims provides a mock function with given fields: value
func (_m *Applicationable) SetOptionalClaims(value models.OptionalClaimsable) {
	_m.Called(value)
}

// SetOwners provides a mock function with given fields: value
func (_m *Applicationable) SetOwners(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetParentalControlSettings provides a mock function with given fields: value
func (_m *Applicationable) SetParentalControlSettings(value models.ParentalControlSettingsable) {
	_m.Called(value)
}

// SetPasswordCredentials provides a mock function with given fields: value
func (_m *Applicationable) SetPasswordCredentials(value []models.PasswordCredentialable) {
	_m.Called(value)
}

// SetPublicClient provides a mock function with given fields: value
func (_m *Applicationable) SetPublicClient(value models.PublicClientApplicationable) {
	_m.Called(value)
}

// SetPublisherDomain provides a mock function with given fields: value
func (_m *Applicationable) SetPublisherDomain(value *string) {
	_m.Called(value)
}

// SetRequestSignatureVerification provides a mock function with given fields: value
func (_m *Applicationable) SetRequestSignatureVerification(value models.RequestSignatureVerificationable) {
	_m.Called(value)
}

// SetRequiredResourceAccess provides a mock function with given fields: value
func (_m *Applicationable) SetRequiredResourceAccess(value []models.RequiredResourceAccessable) {
	_m.Called(value)
}

// SetSamlMetadataUrl provides a mock function with given fields: value
func (_m *Applicationable) SetSamlMetadataUrl(value *string) {
	_m.Called(value)
}

// SetServiceManagementReference provides a mock function with given fields: value
func (_m *Applicationable) SetServiceManagementReference(value *string) {
	_m.Called(value)
}

// SetServicePrincipalLockConfiguration provides a mock function with given fields: value
func (_m *Applicationable) SetServicePrincipalLockConfiguration(value models.ServicePrincipalLockConfigurationable) {
	_m.Called(value)
}

// SetSignInAudience provides a mock function with given fields: value
func (_m *Applicationable) SetSignInAudience(value *string) {
	_m.Called(value)
}

// SetSpa provides a mock function with given fields: value
func (_m *Applicationable) SetSpa(value models.SpaApplicationable) {
	_m.Called(value)
}

// SetSynchronization provides a mock function with given fields: value
func (_m *Applicationable) SetSynchronization(value models.Synchronizationable) {
	_m.Called(value)
}

// SetTags provides a mock function with given fields: value
func (_m *Applicationable) SetTags(value []string) {
	_m.Called(value)
}

// SetTokenEncryptionKeyId provides a mock function with given fields: value
func (_m *Applicationable) SetTokenEncryptionKeyId(value *uuid.UUID) {
	_m.Called(value)
}

// SetTokenIssuancePolicies provides a mock function with given fields: value
func (_m *Applicationable) SetTokenIssuancePolicies(value []models.TokenIssuancePolicyable) {
	_m.Called(value)
}

// SetTokenLifetimePolicies provides a mock function with given fields: value
func (_m *Applicationable) SetTokenLifetimePolicies(value []models.TokenLifetimePolicyable) {
	_m.Called(value)
}

// SetVerifiedPublisher provides a mock function with given fields: value
func (_m *Applicationable) SetVerifiedPublisher(value models.VerifiedPublisherable) {
	_m.Called(value)
}

// SetWeb provides a mock function with given fields: value
func (_m *Applicationable) SetWeb(value models.WebApplicationable) {
	_m.Called(value)
}

// NewApplicationable creates a new instance of Applicationable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Applicationable {
	mock := &Applicationable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
