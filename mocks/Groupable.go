// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	serialization "github.com/microsoft/kiota-abstractions-go/serialization"
	models "github.com/microsoftgraph/msgraph-sdk-go/models"
	mock "github.com/stretchr/testify/mock"

	store "github.com/microsoft/kiota-abstractions-go/store"

	time "time"
)

// Groupable is an autogenerated mock type for the Groupable type
type Groupable struct {
	mock.Mock
}

// GetAcceptedSenders provides a mock function with given fields:
func (_m *Groupable) GetAcceptedSenders() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetAdditionalData provides a mock function with given fields:
func (_m *Groupable) GetAdditionalData() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetAllowExternalSenders provides a mock function with given fields:
func (_m *Groupable) GetAllowExternalSenders() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetAppRoleAssignments provides a mock function with given fields:
func (_m *Groupable) GetAppRoleAssignments() []models.AppRoleAssignmentable {
	ret := _m.Called()

	var r0 []models.AppRoleAssignmentable
	if rf, ok := ret.Get(0).(func() []models.AppRoleAssignmentable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AppRoleAssignmentable)
		}
	}

	return r0
}

// GetAssignedLabels provides a mock function with given fields:
func (_m *Groupable) GetAssignedLabels() []models.AssignedLabelable {
	ret := _m.Called()

	var r0 []models.AssignedLabelable
	if rf, ok := ret.Get(0).(func() []models.AssignedLabelable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssignedLabelable)
		}
	}

	return r0
}

// GetAssignedLicenses provides a mock function with given fields:
func (_m *Groupable) GetAssignedLicenses() []models.AssignedLicenseable {
	ret := _m.Called()

	var r0 []models.AssignedLicenseable
	if rf, ok := ret.Get(0).(func() []models.AssignedLicenseable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.AssignedLicenseable)
		}
	}

	return r0
}

// GetAutoSubscribeNewMembers provides a mock function with given fields:
func (_m *Groupable) GetAutoSubscribeNewMembers() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetBackingStore provides a mock function with given fields:
func (_m *Groupable) GetBackingStore() store.BackingStore {
	ret := _m.Called()

	var r0 store.BackingStore
	if rf, ok := ret.Get(0).(func() store.BackingStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.BackingStore)
		}
	}

	return r0
}

// GetCalendar provides a mock function with given fields:
func (_m *Groupable) GetCalendar() models.Calendarable {
	ret := _m.Called()

	var r0 models.Calendarable
	if rf, ok := ret.Get(0).(func() models.Calendarable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Calendarable)
		}
	}

	return r0
}

// GetCalendarView provides a mock function with given fields:
func (_m *Groupable) GetCalendarView() []models.Eventable {
	ret := _m.Called()

	var r0 []models.Eventable
	if rf, ok := ret.Get(0).(func() []models.Eventable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Eventable)
		}
	}

	return r0
}

// GetClassification provides a mock function with given fields:
func (_m *Groupable) GetClassification() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetConversations provides a mock function with given fields:
func (_m *Groupable) GetConversations() []models.Conversationable {
	ret := _m.Called()

	var r0 []models.Conversationable
	if rf, ok := ret.Get(0).(func() []models.Conversationable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Conversationable)
		}
	}

	return r0
}

// GetCreatedDateTime provides a mock function with given fields:
func (_m *Groupable) GetCreatedDateTime() *time.Time {
	ret := _m.Called()

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetCreatedOnBehalfOf provides a mock function with given fields:
func (_m *Groupable) GetCreatedOnBehalfOf() models.DirectoryObjectable {
	ret := _m.Called()

	var r0 models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.DirectoryObjectable)
		}
	}

	return r0
}

// GetDeletedDateTime provides a mock function with given fields:
func (_m *Groupable) GetDeletedDateTime() *time.Time {
	ret := _m.Called()

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetDescription provides a mock function with given fields:
func (_m *Groupable) GetDescription() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetDisplayName provides a mock function with given fields:
func (_m *Groupable) GetDisplayName() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetDrive provides a mock function with given fields:
func (_m *Groupable) GetDrive() models.Driveable {
	ret := _m.Called()

	var r0 models.Driveable
	if rf, ok := ret.Get(0).(func() models.Driveable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Driveable)
		}
	}

	return r0
}

// GetDrives provides a mock function with given fields:
func (_m *Groupable) GetDrives() []models.Driveable {
	ret := _m.Called()

	var r0 []models.Driveable
	if rf, ok := ret.Get(0).(func() []models.Driveable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Driveable)
		}
	}

	return r0
}

// GetEvents provides a mock function with given fields:
func (_m *Groupable) GetEvents() []models.Eventable {
	ret := _m.Called()

	var r0 []models.Eventable
	if rf, ok := ret.Get(0).(func() []models.Eventable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Eventable)
		}
	}

	return r0
}

// GetExpirationDateTime provides a mock function with given fields:
func (_m *Groupable) GetExpirationDateTime() *time.Time {
	ret := _m.Called()

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetExtensions provides a mock function with given fields:
func (_m *Groupable) GetExtensions() []models.Extensionable {
	ret := _m.Called()

	var r0 []models.Extensionable
	if rf, ok := ret.Get(0).(func() []models.Extensionable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Extensionable)
		}
	}

	return r0
}

// GetFieldDeserializers provides a mock function with given fields:
func (_m *Groupable) GetFieldDeserializers() map[string]func(serialization.ParseNode) error {
	ret := _m.Called()

	var r0 map[string]func(serialization.ParseNode) error
	if rf, ok := ret.Get(0).(func() map[string]func(serialization.ParseNode) error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]func(serialization.ParseNode) error)
		}
	}

	return r0
}

// GetGroupLifecyclePolicies provides a mock function with given fields:
func (_m *Groupable) GetGroupLifecyclePolicies() []models.GroupLifecyclePolicyable {
	ret := _m.Called()

	var r0 []models.GroupLifecyclePolicyable
	if rf, ok := ret.Get(0).(func() []models.GroupLifecyclePolicyable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GroupLifecyclePolicyable)
		}
	}

	return r0
}

// GetGroupTypes provides a mock function with given fields:
func (_m *Groupable) GetGroupTypes() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetHasMembersWithLicenseErrors provides a mock function with given fields:
func (_m *Groupable) GetHasMembersWithLicenseErrors() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetHideFromAddressLists provides a mock function with given fields:
func (_m *Groupable) GetHideFromAddressLists() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetHideFromOutlookClients provides a mock function with given fields:
func (_m *Groupable) GetHideFromOutlookClients() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetId provides a mock function with given fields:
func (_m *Groupable) GetId() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetIsArchived provides a mock function with given fields:
func (_m *Groupable) GetIsArchived() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetIsAssignableToRole provides a mock function with given fields:
func (_m *Groupable) GetIsAssignableToRole() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetIsSubscribedByMail provides a mock function with given fields:
func (_m *Groupable) GetIsSubscribedByMail() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetLicenseProcessingState provides a mock function with given fields:
func (_m *Groupable) GetLicenseProcessingState() models.LicenseProcessingStateable {
	ret := _m.Called()

	var r0 models.LicenseProcessingStateable
	if rf, ok := ret.Get(0).(func() models.LicenseProcessingStateable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.LicenseProcessingStateable)
		}
	}

	return r0
}

// GetMail provides a mock function with given fields:
func (_m *Groupable) GetMail() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetMailEnabled provides a mock function with given fields:
func (_m *Groupable) GetMailEnabled() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetMailNickname provides a mock function with given fields:
func (_m *Groupable) GetMailNickname() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetMemberOf provides a mock function with given fields:
func (_m *Groupable) GetMemberOf() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetMembers provides a mock function with given fields:
func (_m *Groupable) GetMembers() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetMembersWithLicenseErrors provides a mock function with given fields:
func (_m *Groupable) GetMembersWithLicenseErrors() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetMembershipRule provides a mock function with given fields:
func (_m *Groupable) GetMembershipRule() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetMembershipRuleProcessingState provides a mock function with given fields:
func (_m *Groupable) GetMembershipRuleProcessingState() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetOdataType provides a mock function with given fields:
func (_m *Groupable) GetOdataType() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetOnPremisesDomainName provides a mock function with given fields:
func (_m *Groupable) GetOnPremisesDomainName() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetOnPremisesLastSyncDateTime provides a mock function with given fields:
func (_m *Groupable) GetOnPremisesLastSyncDateTime() *time.Time {
	ret := _m.Called()

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetOnPremisesNetBiosName provides a mock function with given fields:
func (_m *Groupable) GetOnPremisesNetBiosName() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetOnPremisesProvisioningErrors provides a mock function with given fields:
func (_m *Groupable) GetOnPremisesProvisioningErrors() []models.OnPremisesProvisioningErrorable {
	ret := _m.Called()

	var r0 []models.OnPremisesProvisioningErrorable
	if rf, ok := ret.Get(0).(func() []models.OnPremisesProvisioningErrorable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.OnPremisesProvisioningErrorable)
		}
	}

	return r0
}

// GetOnPremisesSamAccountName provides a mock function with given fields:
func (_m *Groupable) GetOnPremisesSamAccountName() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetOnPremisesSecurityIdentifier provides a mock function with given fields:
func (_m *Groupable) GetOnPremisesSecurityIdentifier() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetOnPremisesSyncEnabled provides a mock function with given fields:
func (_m *Groupable) GetOnPremisesSyncEnabled() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetOnenote provides a mock function with given fields:
func (_m *Groupable) GetOnenote() models.Onenoteable {
	ret := _m.Called()

	var r0 models.Onenoteable
	if rf, ok := ret.Get(0).(func() models.Onenoteable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Onenoteable)
		}
	}

	return r0
}

// GetOwners provides a mock function with given fields:
func (_m *Groupable) GetOwners() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetPermissionGrants provides a mock function with given fields:
func (_m *Groupable) GetPermissionGrants() []models.ResourceSpecificPermissionGrantable {
	ret := _m.Called()

	var r0 []models.ResourceSpecificPermissionGrantable
	if rf, ok := ret.Get(0).(func() []models.ResourceSpecificPermissionGrantable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ResourceSpecificPermissionGrantable)
		}
	}

	return r0
}

// GetPhoto provides a mock function with given fields:
func (_m *Groupable) GetPhoto() models.ProfilePhotoable {
	ret := _m.Called()

	var r0 models.ProfilePhotoable
	if rf, ok := ret.Get(0).(func() models.ProfilePhotoable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ProfilePhotoable)
		}
	}

	return r0
}

// GetPhotos provides a mock function with given fields:
func (_m *Groupable) GetPhotos() []models.ProfilePhotoable {
	ret := _m.Called()

	var r0 []models.ProfilePhotoable
	if rf, ok := ret.Get(0).(func() []models.ProfilePhotoable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProfilePhotoable)
		}
	}

	return r0
}

// GetPlanner provides a mock function with given fields:
func (_m *Groupable) GetPlanner() models.PlannerGroupable {
	ret := _m.Called()

	var r0 models.PlannerGroupable
	if rf, ok := ret.Get(0).(func() models.PlannerGroupable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.PlannerGroupable)
		}
	}

	return r0
}

// GetPreferredDataLocation provides a mock function with given fields:
func (_m *Groupable) GetPreferredDataLocation() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetPreferredLanguage provides a mock function with given fields:
func (_m *Groupable) GetPreferredLanguage() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetProxyAddresses provides a mock function with given fields:
func (_m *Groupable) GetProxyAddresses() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetRejectedSenders provides a mock function with given fields:
func (_m *Groupable) GetRejectedSenders() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetRenewedDateTime provides a mock function with given fields:
func (_m *Groupable) GetRenewedDateTime() *time.Time {
	ret := _m.Called()

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func() *time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetSecurityEnabled provides a mock function with given fields:
func (_m *Groupable) GetSecurityEnabled() *bool {
	ret := _m.Called()

	var r0 *bool
	if rf, ok := ret.Get(0).(func() *bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bool)
		}
	}

	return r0
}

// GetSecurityIdentifier provides a mock function with given fields:
func (_m *Groupable) GetSecurityIdentifier() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetServiceProvisioningErrors provides a mock function with given fields:
func (_m *Groupable) GetServiceProvisioningErrors() []models.ServiceProvisioningErrorable {
	ret := _m.Called()

	var r0 []models.ServiceProvisioningErrorable
	if rf, ok := ret.Get(0).(func() []models.ServiceProvisioningErrorable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ServiceProvisioningErrorable)
		}
	}

	return r0
}

// GetSettings provides a mock function with given fields:
func (_m *Groupable) GetSettings() []models.GroupSettingable {
	ret := _m.Called()

	var r0 []models.GroupSettingable
	if rf, ok := ret.Get(0).(func() []models.GroupSettingable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GroupSettingable)
		}
	}

	return r0
}

// GetSites provides a mock function with given fields:
func (_m *Groupable) GetSites() []models.Siteable {
	ret := _m.Called()

	var r0 []models.Siteable
	if rf, ok := ret.Get(0).(func() []models.Siteable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Siteable)
		}
	}

	return r0
}

// GetTeam provides a mock function with given fields:
func (_m *Groupable) GetTeam() models.Teamable {
	ret := _m.Called()

	var r0 models.Teamable
	if rf, ok := ret.Get(0).(func() models.Teamable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Teamable)
		}
	}

	return r0
}

// GetTheme provides a mock function with given fields:
func (_m *Groupable) GetTheme() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetThreads provides a mock function with given fields:
func (_m *Groupable) GetThreads() []models.ConversationThreadable {
	ret := _m.Called()

	var r0 []models.ConversationThreadable
	if rf, ok := ret.Get(0).(func() []models.ConversationThreadable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ConversationThreadable)
		}
	}

	return r0
}

// GetTransitiveMemberOf provides a mock function with given fields:
func (_m *Groupable) GetTransitiveMemberOf() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetTransitiveMembers provides a mock function with given fields:
func (_m *Groupable) GetTransitiveMembers() []models.DirectoryObjectable {
	ret := _m.Called()

	var r0 []models.DirectoryObjectable
	if rf, ok := ret.Get(0).(func() []models.DirectoryObjectable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.DirectoryObjectable)
		}
	}

	return r0
}

// GetUnseenCount provides a mock function with given fields:
func (_m *Groupable) GetUnseenCount() *int32 {
	ret := _m.Called()

	var r0 *int32
	if rf, ok := ret.Get(0).(func() *int32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int32)
		}
	}

	return r0
}

// GetVisibility provides a mock function with given fields:
func (_m *Groupable) GetVisibility() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// Serialize provides a mock function with given fields: writer
func (_m *Groupable) Serialize(writer serialization.SerializationWriter) error {
	ret := _m.Called(writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(serialization.SerializationWriter) error); ok {
		r0 = rf(writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAcceptedSenders provides a mock function with given fields: value
func (_m *Groupable) SetAcceptedSenders(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetAdditionalData provides a mock function with given fields: value
func (_m *Groupable) SetAdditionalData(value map[string]interface{}) {
	_m.Called(value)
}

// SetAllowExternalSenders provides a mock function with given fields: value
func (_m *Groupable) SetAllowExternalSenders(value *bool) {
	_m.Called(value)
}

// SetAppRoleAssignments provides a mock function with given fields: value
func (_m *Groupable) SetAppRoleAssignments(value []models.AppRoleAssignmentable) {
	_m.Called(value)
}

// SetAssignedLabels provides a mock function with given fields: value
func (_m *Groupable) SetAssignedLabels(value []models.AssignedLabelable) {
	_m.Called(value)
}

// SetAssignedLicenses provides a mock function with given fields: value
func (_m *Groupable) SetAssignedLicenses(value []models.AssignedLicenseable) {
	_m.Called(value)
}

// SetAutoSubscribeNewMembers provides a mock function with given fields: value
func (_m *Groupable) SetAutoSubscribeNewMembers(value *bool) {
	_m.Called(value)
}

// SetBackingStore provides a mock function with given fields: value
func (_m *Groupable) SetBackingStore(value store.BackingStore) {
	_m.Called(value)
}

// SetCalendar provides a mock function with given fields: value
func (_m *Groupable) SetCalendar(value models.Calendarable) {
	_m.Called(value)
}

// SetCalendarView provides a mock function with given fields: value
func (_m *Groupable) SetCalendarView(value []models.Eventable) {
	_m.Called(value)
}

// SetClassification provides a mock function with given fields: value
func (_m *Groupable) SetClassification(value *string) {
	_m.Called(value)
}

// SetConversations provides a mock function with given fields: value
func (_m *Groupable) SetConversations(value []models.Conversationable) {
	_m.Called(value)
}

// SetCreatedDateTime provides a mock function with given fields: value
func (_m *Groupable) SetCreatedDateTime(value *time.Time) {
	_m.Called(value)
}

// SetCreatedOnBehalfOf provides a mock function with given fields: value
func (_m *Groupable) SetCreatedOnBehalfOf(value models.DirectoryObjectable) {
	_m.Called(value)
}

// SetDeletedDateTime provides a mock function with given fields: value
func (_m *Groupable) SetDeletedDateTime(value *time.Time) {
	_m.Called(value)
}

// SetDescription provides a mock function with given fields: value
func (_m *Groupable) SetDescription(value *string) {
	_m.Called(value)
}

// SetDisplayName provides a mock function with given fields: value
func (_m *Groupable) SetDisplayName(value *string) {
	_m.Called(value)
}

// SetDrive provides a mock function with given fields: value
func (_m *Groupable) SetDrive(value models.Driveable) {
	_m.Called(value)
}

// SetDrives provides a mock function with given fields: value
func (_m *Groupable) SetDrives(value []models.Driveable) {
	_m.Called(value)
}

// SetEvents provides a mock function with given fields: value
func (_m *Groupable) SetEvents(value []models.Eventable) {
	_m.Called(value)
}

// SetExpirationDateTime provides a mock function with given fields: value
func (_m *Groupable) SetExpirationDateTime(value *time.Time) {
	_m.Called(value)
}

// SetExtensions provides a mock function with given fields: value
func (_m *Groupable) SetExtensions(value []models.Extensionable) {
	_m.Called(value)
}

// SetGroupLifecyclePolicies provides a mock function with given fields: value
func (_m *Groupable) SetGroupLifecyclePolicies(value []models.GroupLifecyclePolicyable) {
	_m.Called(value)
}

// SetGroupTypes provides a mock function with given fields: value
func (_m *Groupable) SetGroupTypes(value []string) {
	_m.Called(value)
}

// SetHasMembersWithLicenseErrors provides a mock function with given fields: value
func (_m *Groupable) SetHasMembersWithLicenseErrors(value *bool) {
	_m.Called(value)
}

// SetHideFromAddressLists provides a mock function with given fields: value
func (_m *Groupable) SetHideFromAddressLists(value *bool) {
	_m.Called(value)
}

// SetHideFromOutlookClients provides a mock function with given fields: value
func (_m *Groupable) SetHideFromOutlookClients(value *bool) {
	_m.Called(value)
}

// SetId provides a mock function with given fields: value
func (_m *Groupable) SetId(value *string) {
	_m.Called(value)
}

// SetIsArchived provides a mock function with given fields: value
func (_m *Groupable) SetIsArchived(value *bool) {
	_m.Called(value)
}

// SetIsAssignableToRole provides a mock function with given fields: value
func (_m *Groupable) SetIsAssignableToRole(value *bool) {
	_m.Called(value)
}

// SetIsSubscribedByMail provides a mock function with given fields: value
func (_m *Groupable) SetIsSubscribedByMail(value *bool) {
	_m.Called(value)
}

// SetLicenseProcessingState provides a mock function with given fields: value
func (_m *Groupable) SetLicenseProcessingState(value models.LicenseProcessingStateable) {
	_m.Called(value)
}

// SetMail provides a mock function with given fields: value
func (_m *Groupable) SetMail(value *string) {
	_m.Called(value)
}

// SetMailEnabled provides a mock function with given fields: value
func (_m *Groupable) SetMailEnabled(value *bool) {
	_m.Called(value)
}

// SetMailNickname provides a mock function with given fields: value
func (_m *Groupable) SetMailNickname(value *string) {
	_m.Called(value)
}

// SetMemberOf provides a mock function with given fields: value
func (_m *Groupable) SetMemberOf(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetMembers provides a mock function with given fields: value
func (_m *Groupable) SetMembers(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetMembersWithLicenseErrors provides a mock function with given fields: value
func (_m *Groupable) SetMembersWithLicenseErrors(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetMembershipRule provides a mock function with given fields: value
func (_m *Groupable) SetMembershipRule(value *string) {
	_m.Called(value)
}

// SetMembershipRuleProcessingState provides a mock function with given fields: value
func (_m *Groupable) SetMembershipRuleProcessingState(value *string) {
	_m.Called(value)
}

// SetOdataType provides a mock function with given fields: value
func (_m *Groupable) SetOdataType(value *string) {
	_m.Called(value)
}

// SetOnPremisesDomainName provides a mock function with given fields: value
func (_m *Groupable) SetOnPremisesDomainName(value *string) {
	_m.Called(value)
}

// SetOnPremisesLastSyncDateTime provides a mock function with given fields: value
func (_m *Groupable) SetOnPremisesLastSyncDateTime(value *time.Time) {
	_m.Called(value)
}

// SetOnPremisesNetBiosName provides a mock function with given fields: value
func (_m *Groupable) SetOnPremisesNetBiosName(value *string) {
	_m.Called(value)
}

// SetOnPremisesProvisioningErrors provides a mock function with given fields: value
func (_m *Groupable) SetOnPremisesProvisioningErrors(value []models.OnPremisesProvisioningErrorable) {
	_m.Called(value)
}

// SetOnPremisesSamAccountName provides a mock function with given fields: value
func (_m *Groupable) SetOnPremisesSamAccountName(value *string) {
	_m.Called(value)
}

// SetOnPremisesSecurityIdentifier provides a mock function with given fields: value
func (_m *Groupable) SetOnPremisesSecurityIdentifier(value *string) {
	_m.Called(value)
}

// SetOnPremisesSyncEnabled provides a mock function with given fields: value
func (_m *Groupable) SetOnPremisesSyncEnabled(value *bool) {
	_m.Called(value)
}

// SetOnenote provides a mock function with given fields: value
func (_m *Groupable) SetOnenote(value models.Onenoteable) {
	_m.Called(value)
}

// SetOwners provides a mock function with given fields: value
func (_m *Groupable) SetOwners(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetPermissionGrants provides a mock function with given fields: value
func (_m *Groupable) SetPermissionGrants(value []models.ResourceSpecificPermissionGrantable) {
	_m.Called(value)
}

// SetPhoto provides a mock function with given fields: value
func (_m *Groupable) SetPhoto(value models.ProfilePhotoable) {
	_m.Called(value)
}

// SetPhotos provides a mock function with given fields: value
func (_m *Groupable) SetPhotos(value []models.ProfilePhotoable) {
	_m.Called(value)
}

// SetPlanner provides a mock function with given fields: value
func (_m *Groupable) SetPlanner(value models.PlannerGroupable) {
	_m.Called(value)
}

// SetPreferredDataLocation provides a mock function with given fields: value
func (_m *Groupable) SetPreferredDataLocation(value *string) {
	_m.Called(value)
}

// SetPreferredLanguage provides a mock function with given fields: value
func (_m *Groupable) SetPreferredLanguage(value *string) {
	_m.Called(value)
}

// SetProxyAddresses provides a mock function with given fields: value
func (_m *Groupable) SetProxyAddresses(value []string) {
	_m.Called(value)
}

// SetRejectedSenders provides a mock function with given fields: value
func (_m *Groupable) SetRejectedSenders(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetRenewedDateTime provides a mock function with given fields: value
func (_m *Groupable) SetRenewedDateTime(value *time.Time) {
	_m.Called(value)
}

// SetSecurityEnabled provides a mock function with given fields: value
func (_m *Groupable) SetSecurityEnabled(value *bool) {
	_m.Called(value)
}

// SetSecurityIdentifier provides a mock function with given fields: value
func (_m *Groupable) SetSecurityIdentifier(value *string) {
	_m.Called(value)
}

// SetServiceProvisioningErrors provides a mock function with given fields: value
func (_m *Groupable) SetServiceProvisioningErrors(value []models.ServiceProvisioningErrorable) {
	_m.Called(value)
}

// SetSettings provides a mock function with given fields: value
func (_m *Groupable) SetSettings(value []models.GroupSettingable) {
	_m.Called(value)
}

// SetSites provides a mock function with given fields: value
func (_m *Groupable) SetSites(value []models.Siteable) {
	_m.Called(value)
}

// SetTeam provides a mock function with given fields: value
func (_m *Groupable) SetTeam(value models.Teamable) {
	_m.Called(value)
}

// SetTheme provides a mock function with given fields: value
func (_m *Groupable) SetTheme(value *string) {
	_m.Called(value)
}

// SetThreads provides a mock function with given fields: value
func (_m *Groupable) SetThreads(value []models.ConversationThreadable) {
	_m.Called(value)
}

// SetTransitiveMemberOf provides a mock function with given fields: value
func (_m *Groupable) SetTransitiveMemberOf(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetTransitiveMembers provides a mock function with given fields: value
func (_m *Groupable) SetTransitiveMembers(value []models.DirectoryObjectable) {
	_m.Called(value)
}

// SetUnseenCount provides a mock function with given fields: value
func (_m *Groupable) SetUnseenCount(value *int32) {
	_m.Called(value)
}

// SetVisibility provides a mock function with given fields: value
func (_m *Groupable) SetVisibility(value *string) {
	_m.Called(value)
}

// NewGroupable creates a new instance of Groupable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Groupable {
	mock := &Groupable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
